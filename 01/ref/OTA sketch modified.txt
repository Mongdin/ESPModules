#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <PubSubClient.h>

const char* ssid = "potato2G";
const char* password = "Rkawkxnlrla1";

//variabls for blinking an LED with Millis
const int led = 2; // ESP8266 Pin to which onboard LED is connected
unsigned long previousMillis = 0;  // will store last time LED was updated
const long interval = 1000;  // interval at which to blink (milliseconds)
int ledState = LOW;  // ledState used to set the LED
const char* mqtt_server =    "192.168.0.3"; //"tcp://192.168.43.202"; //"114.205.87.39";
const int mqtt_server_port =   1883;  // 1001; //1883;

WiFiClient espClient;
PubSubClient client(espClient);
const int ledGPIO5 = 2;
const int PWM1 = 0;
void setup() {



    
  Serial.begin(115200);
  Serial.println("Booting");
  pinMode(ledGPIO5, OUTPUT);
  pinMode(PWM1,OUTPUT);
  digitalWrite(ledGPIO5,HIGH);
  digitalWrite(PWM1,OUTPUT);
  client.setServer(mqtt_server, mqtt_server_port);
  client.setCallback(callback);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(5000);
    ESP.restart();
  }

  // Port defaults to 8266
  // ArduinoOTA.setPort(8266);

  // Hostname defaults to esp8266-[ChipID]
  // ArduinoOTA.setHostname("myesp8266");

  // No authentication by default
  // ArduinoOTA.setPassword("admin");

  // Password can be set with it's md5 value as well
  // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
  // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");

  ArduinoOTA.onStart([]() {
    String type;
    if (ArduinoOTA.getCommand() == U_FLASH)
      type = "sketch";
    else // U_SPIFFS
      type = "filesystem";

    // NOTE: if updating SPIFFS this would be the place to unmount SPIFFS using SPIFFS.end()
    Serial.println("Start updating " + type);
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
    else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
    else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
    else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
    else if (error == OTA_END_ERROR) Serial.println("End Failed");
  });
  ArduinoOTA.begin();
  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}


//loop to blink without delay////////////////////////////////////////////
 


void callback(String topic, byte* message, unsigned int length) 
{
  
  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(". Message: ");
  String messageTemp;

  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
    messageTemp += (char)message[i];
  }
  Serial.println();

  if (topic == "esp8266/function/Lamp") {
    Lamp_Control(messageTemp);
  }
  if (topic == "esp8266/function/Motor") {
    Motor_Control(messageTemp);
  }
  if (topic == "esp8266/function/LED") {
    LEDPWM_Control(messageTemp);
  }
  
  Serial.println();
  messageTemp = ""; //MT 초기화
}


void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect

    if (client.connect("ESP8266Client2")) {
      Serial.println("connected");
      client.subscribe("esp8266/function/Lamp");
      client.subscribe("esp8266/function/Motor");
      client.subscribe("esp8266/function/LED");
      client.publish("esp8266/text", "Welcome Smart Home");
      client.subscribe("esp8266/read");


    }
    else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}






void loop() {
  if (!client.connected()) {
    reconnect();
  }
  if (!client.loop()) {

    client.connect("ESP8266Client2");
  }
 
  ArduinoOTA.handle();
}

String Lamp_Control(String messageTemp) {
  Serial.println("LAMP On Off Control");
  if (messageTemp == "1") {
    Serial.print("On");
    digitalWrite(ledGPIO5, LOW); //led D1
    return "LED ON";
  }// 형광등 제어
  else if (messageTemp == "3") {
   
    Serial.print("Off");
    digitalWrite(ledGPIO5, HIGH); //led D1
    return "LED OFF";
  }
}

String Motor_Control(String messageTemp) {
  ;
}

String LEDPWM_Control(String SDuty) {
  int Duty = atoi(SDuty.c_str());
  Serial.print("\n Duty : ");
  Serial.println(Duty);
  analogWrite(PWM1, Duty * 100);
}

